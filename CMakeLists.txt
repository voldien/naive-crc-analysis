CMAKE_MINIMUM_REQUIRED( VERSION 3.11.0 )
PROJECT(crc-analysis)

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin CACHE INTERNAL "" FORCE)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib CACHE INTERNAL "" FORCE)


OPTION(BUILD_SHARED_LIBS "Build package with shared libraries." ON)
IF(NOT BUILD_SHARED_LIBS)
	SET(CMAKE_EXE_LINKER_FLAGS "-static")
	SET(LINK_SEARCH_START_STATIC TRUE)
ELSE()
	MESSAGE(STATUS "Shared libraries enabled")
ENDIF(NOT BUILD_SHARED_LIBS)

# C++17
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)

FILE(GLOB SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp
${CMAKE_CURRENT_SOURCE_DIR}/extern/pcg-c-basic/*.c
)
FILE(GLOB HEADER_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.h)
IF(PKG_CONFIG_FOUND)
	MESSAGE(STATUS "Found pkg-config: ${PKG_CONFIG_EXECUTABLE} -- version ${PKG_CONFIG_VERSION_STRING}.")
ELSE()
	MESSAGE(ERROR "")
	# TODO add logic for handling if pkg-config not available.
ENDIF()

ADD_EXECUTABLE(CRCAnlysis ${SOURCE_FILES} ${HEADER_FILES} )
TARGET_LINK_LIBRARIES(CRCAnlysis cxxopts marl)

ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/extern/cxxopts EXCLUDE_FROM_ALL)
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/extern/marl EXCLUDE_FROM_ALL)

# Vulkan dependies headers.
TARGET_INCLUDE_DIRECTORIES(CRCAnlysis PRIVATE 
${CMAKE_CURRENT_SOURCE_DIR}/extern/marl/include
${CMAKE_CURRENT_SOURCE_DIR}/extern/pcg-c-basic
${CMAKE_CURRENT_SOURCE_DIR}/extern/cxxopts/include
${CMAKE_CURRENT_SOURCE_DIR}/extern/CRCpp/inc)
# 